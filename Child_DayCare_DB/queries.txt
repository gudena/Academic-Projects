CREATE OR REPLACE TRIGGER TOYS_UPDATE
AFTER INSERT ON TOY_DISTRIBUTION
FOR EACH ROW
BEGIN
UPDATE TOYS
SET TOTAL_QUANTITY=TOTAL_QUANTITY - :NEW.QUANTITY
WHERE T_ID=:NEW.TOY_ID;
END;
CREATE OR REPLACE PROCEDURE CLASS_LIST
( CLASS_ID IN CHILD.CLASS %TYPE) AS
CHILD_ID CHILD.CHILD_ID%TYPE;
CHILD_FNAME CHILD.FNAME%TYPE;
CURSOR RESULT IS
(
SELECT CHILD_ID,FNAME
FROM CHILD WHERE CLASS_ID=CLASS
);
BEGIN
OPEN RESULT;
LOOP
FETCH RESULT INTO CHILD_ID,CHILD_FNAME;
EXIT WHEN (RESULT%NOTFOUND);
DBMS_OUTPUT.PUT_LINE
(
'CHILD_ID IS ' || CHILD_ID || ' CHILD NAME IS '||CHILD_FNAME
);
END LOOP;
CLOSE RESULT;
END;


BEGIN
CLASS_LIST(1);
END;

CREATE OR REPLACE PROCEDURE NO_OF_CARETAKERS
(DEPT IN NUMBER) AS
RES NUMBER:=0;
BEGIN
SELECT COUNT(CSSN) INTO RES
FROM CARETAKER
WHERE DEPT_ID =DEPT;
DBMS_OUTPUT.PUT_LINE('TOTAL NUMBER OF EMPLOYEES WORKING IN THIS DEPT ARE '||RES);
END;

BEGIN
NO_OF_CARETAKERS(2)
END;

CREATE OR REPLACE PROCEDURE TOTAL_FEE
(ID IN NUMBER) AS
FEE NUMBER:=0;
BEGIN
SELECT SUM(AMOUNT) INTO FEE
FROM TUITION_PAYMENT
WHERE CHILD_ID =ID;
DBMS_OUTPUT.PUT_LINE('TOTAL FEES PAID BY CHILD IS '||FEE);
END;

create or replace TRIGGER SALARY_COMPUTE
AFTER INSERT ON TIMING
FOR EACH ROW
DECLARE 
BASICSALARY INT;
SALARYCOMPUTED INT;
CSSN CHAR(9);
JID INT;
BEGIN
SELECT  C.CSSN,C.JOB_ID,J.BASIC_SALARY INTO CSSN,JID,BASICSALARY FROM CARETAKER C JOIN JOB J ON J.JOB_ID = C.JOB_ID
WHERE C.CSSN = :NEW.CSSN;
SALARYCOMPUTED := (8*BASICSALARY)/10000;
INSERT INTO SALARYCOMPUTATION 
VALUES(CSSN,:NEW.TIME_ID,JID, SALARYCOMPUTED);
END;
